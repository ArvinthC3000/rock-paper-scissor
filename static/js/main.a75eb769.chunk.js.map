{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["iconStyle","height","width","App","useState","userSelection","setuserSelection","computerSelection","setComputerSelection","status","setStatus","gameOver","setGameOver","showGameReset","setShowGameReset","options","component","style","key","keyCode","name","userScore","setUserScore","computerScore","setComputerScore","maxScore","useEffect","document","addEventListener","handleKeyDown","removeEventListener","handleClick","option","generateComputerSelection","e","filter","length","Math","floor","random","className","map","title","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a75eb769.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { FaHandRock, FaHandScissors, FaHandPaper } from 'react-icons/fa';\nimport './App.css';\n\nconst App = () => {\n  const [userSelection, setuserSelection] = useState([]);\n  const [computerSelection, setComputerSelection] = useState([]);\n  const [status, setStatus] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [showGameReset, setShowGameReset] = useState(false);\n  const options = [\n    {\n      component: <FaHandRock style={iconStyle} />,\n      key: 'A',\n      keyCode: 65,\n      name: 'Rock',\n    },\n    {\n      component: <FaHandPaper style={iconStyle} />,\n      key: 'S',\n      keyCode: 83,\n      name: 'Paper',\n    },\n    {\n      component: <FaHandScissors style={iconStyle} />,\n      key: 'D',\n      keyCode: 68,\n      name: 'Scissors',\n    },\n  ];\n\n  const [userScore, setUserScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const maxScore = 10;\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up  - on unmounting component\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* Game logic */\n  useEffect(() => {\n    if (gameOver) return;\n    switch (userSelection.name + computerSelection.name) {\n      case 'PaperRock': // use either upper or lower case\n      case 'RockScissors':\n      case 'ScissorsPaper':\n        setStatus('Point for you');\n        setUserScore(userScore + 1);\n        break;\n      case 'RockPaper':\n      case 'ScissorsRock':\n      case 'PaperScissors':\n        setStatus('Point for the computer');\n        setComputerScore(computerScore + 1);\n        break;\n      case 'RockRock':\n      case 'ScissorsScissors':\n      case 'PaperPaper':\n        setStatus('Try again');\n        break;\n      default:\n        setStatus('');\n        break;\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userSelection, computerSelection]);\n\n  useEffect(() => {\n    if (computerScore === maxScore || userScore === maxScore) {\n      setGameOver(true);\n      setShowGameReset(true);\n    }\n    if (computerScore >= maxScore) setStatus('You lost! ðŸ˜“');\n    if (userScore >= maxScore) setStatus('You Won! ðŸ¤©âœ¨');\n  }, [computerScore, userScore]);\n\n  const handleClick = option => {\n    if (gameOver) return;\n    generateComputerSelection();\n    setuserSelection(option);\n  };\n\n  /* Handle key selecetion (calls handle button click) */\n  const handleKeyDown = e => {\n    if (gameOver) return;\n    const option = options.filter(option => option.keyCode === e.keyCode);\n    if (!option.length) return;\n    handleClick(option[0]);\n  };\n\n  /* Random computer selection */\n  const generateComputerSelection = () => {\n    const computerSelection =\n      options[Math.floor(Math.random() * options.length)];\n    setComputerSelection(computerSelection);\n  };\n\n  /* Reset game */\n  const gameReset = () => {\n    setGameOver(false); //\n    setComputerSelection([]);\n    setuserSelection([]);\n    setStatus(null);\n    setComputerScore(0);\n    setUserScore(0);\n    setShowGameReset(false);\n  };\n\n  return (\n    <div className='wrapper'>\n      <div className='appContainer'>\n        <div className='selectionWrapper'>\n          <div className='selection'>\n            <div className='selectionHeader'>Player selection</div>\n            <div className='componentContainer'>{userSelection.component}</div>\n            <div className='progressContainer'>\n              <div\n                className='userProgress'\n                style={{ width: `${(userScore / maxScore) * 100}%` }}></div>\n            </div>\n          </div>\n          <div className='selection'>\n            <div className='selectionHeader'>Computer selection</div>\n            <div className='componentContainer'>\n              {computerSelection.component}\n            </div>\n            <div className='progressContainer'>\n              <div\n                className='computerProgress'\n                style={{ width: `${(computerScore / maxScore) * 100}%` }}></div>\n            </div>\n          </div>\n        </div>\n        <div className='statusContainer'>\n          {status || (\n            <>\n              <div>Start game by clicking one of the following selection.</div>\n              <div>(or) Use assigned hard keys </div>\n            </>\n          )}\n        </div>\n        <div className='buttonWrapper'>\n          <div className='buttonContainer'>\n            {options.map(option => (\n              <button\n                key={option.key}\n                title={`Press '${option.key}'`}\n                value={option}\n                onClick={() => handleClick(option)}>\n                <span>{option.name}</span>\n                <span className='sub'>Press '{option.key}'</span>\n              </button>\n            ))}\n          </div>\n        </div>\n        {showGameReset && (\n          <div className='resetContainer'>\n            <button onClick={gameReset}>Reset</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst iconStyle = {\n  height: '5rem',\n  width: '5rem',\n};\n\nexport default App;\n\n/*\n  Don't manipulate Really DOM.\n  keep JSX simple by avoiding iterating function like map\n  knowing Caviots of hooks before using it \n  always use Semantics code\n  avoid string interpolation for inline css\n  avoid inline css\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}